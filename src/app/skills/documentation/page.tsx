import Chip from '@mui/material/Chip'; // Import Chip
import styles from './page.module.css'; // Reuse the same CSS module structure

const pageChips = ["Notion", "Markdown"]; // Define chips for this page

export default function DocumentationSkillPage() {
  return (
    <div className={styles.container}>
      <div className={styles.backgroundEmoji}>üìù</div> {/* Background Emoji */}

      <h1 className={styles.mainTitle}>Comp√©tence : Documentation</h1>

      {/* Chip Container */}
      <div className={styles.chipContainer}>
        {pageChips.map((chip, index) => (
          <Chip 
            key={index} 
            label={chip} 
            variant="outlined" 
            size="small"
            sx={{ /* Reusing Chip styles */
              color: '#e2e8f0', 
              borderColor: 'rgba(148, 163, 184, 0.3)',
              backgroundColor: 'rgba(100, 116, 139, 0.1)',
              borderRadius: '4px',
              fontSize: '0.85rem',
              margin: '0.3rem',
              '&:hover': {
                backgroundColor: 'rgba(100, 116, 139, 0.2)',
              }
            }}
          />
        ))}
      </div>

      <section className={styles.section}>
        <h2 className={styles.sectionTitle}>Ma d√©finition</h2>
        <p>
          La documentation est une partie essentielle d'un projet. C'est elle qui permet aux autres d√©veloppeurs de comprendre rapidement une fonctionnalit√©, d'identifier la logique derri√®re une architecture, ou tout simplement de prendre en main un projet existant. Elle est aussi indispensable pour les nouveaux arrivants sur un projet , en leur √©vitant de perdre du temps √† tout red√©couvrir par eux-m√™mes .
        </p>
        <p>
          Dans mes projets, je r√©dige aussi bien de la documentation technique (structure, fonctions, API) que fonctionnelle (guides d'utilisation, pr√©sentations pour des utilisateurs finaux). En entreprise, j'ai pris l'habitude de documenter de plus en plus au fil du temps, m√™me si dans mes projets personnels, c'est une pratique que j'applique d√©j√† de fa√ßon tr√®s naturelle.
        </p>
        <p>
          En g√©n√©ral, je commence la documentation pendant le projet pour tout ce qui est fonctionnel, puis je finalise une documentation technique claire et compl√®te √† la fin , pour guarantir une bonne transmission du projet.
        </p>
      </section>

      <section className={styles.section}>
        <h2 className={styles.sectionTitle}>Mes √©l√©ments de preuve</h2>
        <p>
          J'utilise principalement deux outils pour documenter mes projets :
        </p>
        <ul className={styles.list}>
            <li>Notion, pour tout ce qui concerne les pr√©sentations lisibles, claires, partag√©es facilement en ligne (utilisation, guides, onboarding‚Ä¶)</li>
            <li>Markdown, pour la documentation technique "d√©veloppeur" : structure de projet, logique metier , endpoints API, fonctionnement interne , etc .</li>
        </ul>
        <p>
          Sur le projet Agence Walker, par exemple, j'ai r√©dig√© une documentation d√©taill√©e pour les clients qui allaient reprendre le projet. Elle comprenait √† la fois des instructions d'utilisation et des pr√©cisions techniques essentielles.
        </p>
        <p>
          Un autre exemple fort est le projet Atlas, dans le cadre de mon alternance. J'ai r√©dig√© une documentation compl√®te sur les API que j'avais mises en place dans le projet, mais aussi une documentation d'utilisation √† destination d'utilisateurs non-techniques.
        </p>
        <p>
          J'ai eu beaucoup de retours positifs sur cette partie, notamment sur la claret√© de mes explications et ma capacit√© √† vulgariser des concepts parfois techniques.
        </p>
      </section>

      <section className={styles.section}>
        <h2 className={styles.sectionTitle}>Mon autocritique</h2>
        <p>
          Je m'adapte √† chaque besoin : j'utilise des listes, des tableaux, des sch√©mas selon la situation. Mon but est que l'information soit lisible et utile, sans sur-documenter inutilement. Je documente ce qui vaut vraiment la peine d'√™tre √©crite.
        </p>
        <p>
          Ma mani√®re de structurer une documentation est assez proche de celle que j'ai pour √©crire du code : claire, logique, lisible, m√™me si je me permets plus de souplesse. Je ne mets pas Notion et Markdown en comp√©tition ‚Äî les deux ont leur r√¥le, et je sais choisir le bon outil selon le public et le besoin.
        </p>
      </section>

      <section className={styles.section}>
        <h2 className={styles.sectionTitle}>Mon √©volution dans cette comp√©tence</h2>
        <p>
          Ce que je souhaite am√©liorer, c'est r√©diger de la documentation encore plus syst√©matiquement, m√™me sur mes petits projets. C'est une vraie comp√©tence, pas juste un bonus. Elle permet de transmettre, de clarifier, de structurer sa pens√©e.
        </p>
        <p>
          Certaines documentations sont destin√©es √† des profils techniques, d'autres √† des profils metiers ‚Äî je m'adapte aux deux. En tant que futur Tech Lead, je vois clairement la documentation comme un outil de transmission indispensable, que ce soit pour accompagner une √©quipe, pr√©parer une passation, ou assurer la p√©rennit√© d'un projet.
        </p>
      </section>
    </div>
  );
} 