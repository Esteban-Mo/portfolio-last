import Chip from '@mui/material/Chip'; // Import Chip
import styles from './page.module.css'; // Reuse the same CSS module structure
import Link from 'next/link'; // Importer Link

const pageChips = ["React", "Next.js", "Prisma"]; // Define chips for this page

// DÃ©finir les projets associÃ©s Ã  cette catÃ©gorie
const associatedProjects = [
  { name: 'Agence Walker', path: '/projects/agence-walker' },
  { name: 'BDD Turbine', path: '/projects/bdd-turbine' },
  { name: 'Domaine Roumier', path: '/projects/domaine-roumier' },
  { name: 'Module Foncier', path: '/projects/module-foncier' },
  { name: 'Atlas', path: '/projects/atlas' },
];

export default function FrameworksSkillPage() {
  return (
    <div className={styles.container}>
      <div className={styles.backgroundEmoji}>ğŸ“š</div> {/* Background Emoji */}

      <h1 className={styles.mainTitle}>CompÃ©tence : Frameworks et Librairies</h1>

      {/* Chip Container */}
      <div className={styles.chipContainer}>
        {pageChips.map((chip, index) => (
          <Chip 
            key={index} 
            label={chip} 
            variant="outlined" 
            size="small"
            sx={{ /* Reusing Chip styles */
              color: '#e2e8f0', 
              borderColor: 'rgba(148, 163, 184, 0.3)',
              backgroundColor: 'rgba(100, 116, 139, 0.1)',
              borderRadius: '4px',
              fontSize: '0.85rem', // Slightly larger for page context
              margin: '0.3rem',
              '&:hover': {
                backgroundColor: 'rgba(100, 116, 139, 0.2)',
              }
            }}
          />
        ))}
      </div>

      <section className={styles.section}>
        <h2 className={styles.sectionTitle}>Ma dÃ©finition</h2>
        <p>
          Les frameworks et librairies modernes permettent aujourd'hui d'avoir un vÃ©ritable environnement de travail collaboratifâ€‹, structurÃ©, et surtout soutenu par une communautÃ© trÃ¨s activeâ€‹. Que ce soit via des forumsâ€‹, des documentations officielles, ou des tutorielsâ€‹, il existe une multitude de ressources pour accompagner les dÃ©veloppeurs dans leur montÃ©e en compÃ©tencesâ€‹. Cette accessibilitÃ© est une vraie force dans le monde du dÃ©veloppement.
        </p>
        <p>
          Dans la stack que j'utilise, React gÃ¨re la partie front-end (autrement dit l'apparence du site ou de l'application). Next.js se charge de la couche back-end (c'est Ã  dire les rouages de l'application), en prenant en charge le routage, l'API (Les API sont des mÃ©canismes qui permettent Ã  deux composants logiciels de communiquer entre eux Ã  l'aide d'une route URL) et le rendu cÃ´tÃ© serveur. Enfinâ€‹, Prisma fait le lien avec la base de donnÃ©esâ€‹. C'est un ORM moderneâ€‹ (un ORM est un outil qui permet de gÃ©rer les interactions entre le code applicatif et une base de donnÃ©es relationnelle), ce qui simplifie Ã©normÃ©ment la gestion des interactionsâ€‹.
        </p>
        <p>
          En entreprise, ces outils permettent d'unifier l'environnement de travail. Toute l'Ã©quipe Ã©volue sur une seule et mÃªme stack, ce qui permet non seulement une meilleure collaboration, mais aussi une spÃ©cialisation plus poussÃ©e. Ã€ terme, cela amÃ©liore la productivitÃ©â€‹, la maintenabilitÃ©â€‹, et la qualitÃ© globale des projetsâ€‹.
        </p>
      </section>

      <section className={styles.section}>
        <h2 className={styles.sectionTitle}>Mes Ã©lÃ©ments de preuve</h2>
        <p>
          Mes premier pas avec cette stack s'est fait sur le projet BDD Turbine, au tout dÃ©but de mon alternance. Câ€‹'est lÃ  que j'ai dÃ©couvert Reactâ€‹ sous Next.js et Prisma, que je n'avais jamais utilisÃ©s auparavant. Ce projet a Ã©tÃ© une vraie rampe de lancement, car j'ai dÃ» apprendre trÃ¨s rapidement pÎ¿ur Ãªtre autonomeâ€‹ et avancer sur le projet.
        </p>
        <p>
          J'Ã©tais chargÃ© du dÃ©veloppement, avec la responsabilitÃ© de plusieurs user stÎ¿ries. MÃªme si la courbe d'apprentissage Ã©tait lÃ , l'ensemble de la stack est suffisamment bien pensÃ©e pour permettre une prise en main rapide. C'est grÃ¢ce Ã  ce projet que j'ai pu apprendre les bases du SSR (Server Side Rendering), qui permet d'afficher les pages web cÃ´tÃ© serveur qui est un concept important avec Next.
        </p>
        <p>
          Par la suiteâ€‹, jâ€‹'ai mis Ã  prÎ¿fit cette expÃ©rience sur d'autres projets de plus grande envergure tel que "Mondule Foncier (Act)" ou "Atlas". J'ai travaillÃ© aussi bien sur le front (interfaces React) que sur le back-end (logique mÃ©tier, API Next.js) et les accÃ¨s base de donnÃ©es avec Prisma.
        </p>
        <p>
          Ces expÃ©riences m'ont permis d'Ãªtre Ã  l'aise sur le dÃ©veloppement fullstackâ€‹, et d'apprÃ©cier toute la logique de la stack JavaScript moderneâ€‹, de la base de donnÃ©es jusqu'Ã  l'affichage Ã  l'Ã©cranâ€‹.
        </p>
      </section>

      <section className={styles.section}>
        <h2 className={styles.sectionTitle}>Mon autocritique</h2>
        <p>
          Aujâ€‹ourdâ€‹'huiâ€‹, je dirais que j'ai un niveau avancâ€‹Ã© sur React et Next.jsâ€‹, et inteâ€‹rmÃ©dâ€‹iaire sur Prismaâ€‹. Je suis capaâ€‹ble de gâ€‹Ã©rer des prâ€‹ojets complets, dâ€‹'implÃ©menter des compoâ€‹saâ€‹nts rÃ©utilisablesâ€‹, de concevoir dâ€‹es paâ€‹ges dynamâ€‹iques avec le SSRâ€‹, et de connecter efficacemâ€‹ent le toâ€‹ut Ã  une base de donnÃ©es relatioâ€‹nnelleâ€‹.
        </p>
        <p>
          Jâ€‹'ai encore une marge de progression sur la partie "â€‹servicesâ€‹"â€‹, notamment pour tout ce qui concerne la dÃ©coupe avancÃ©e des responsabilitÃ©s dans l'architecture applicative. J'aimerais renforcer cette partie pour rendre mes projets encore plus modulaires et maintenables sur le long terme.
        </p>
        <p>
          Je me sens totalement Ã  l'aise en fullstackâ€‹, car j'aime autant la logique front-end que back-end, et le fait de pouvoir passer de l'un Ã  l'autre sans rupture me donne une vraie fluiditÃ© dans mon travail.
        </p>
      </section>

      <section className={styles.section}>
        <h2 className={styles.sectionTitle}>Mon Ã©volutioâ€‹n dans cette compÃ©tâ€‹ence</h2>
        <p>
          Reactâ€‹, Next.js et Prisma sont aujourdâ€‹'hui des technolâ€‹ogies trÃ¨s populaires et largement utilisÃ©esâ€‹, ce qui en fait un atout majeur dans un pâ€‹rofil tecâ€‹hâ€‹niqueâ€‹â€‹. Leâ€‹ur maâ€‹Ã®trise est un vrai levâ€‹ier de crÃ©diâ€‹bilitÃ© et de productiâ€‹vitÃ©.
        </p>
        <p>
          Pour continuer Ã  progresser, je m'intÃ©resse de plus en plus Ã  l'architecture orientÃ©e composants, afin d'amÃ©liorer la maintenabilitÃ© de mes projets. Je mÃ¨ne actuellement des projets personnels dans lesquels j'expÃ©rimente de nouvelles maniÃ¨res de structurer mon code, tout en suivant des conseils, tutoriels et bonnes pratiques de la communautÃ©.
        </p>
        <p>
          Meâ€‹s prioâ€‹ritÃ©s actuâ€‹elles sonâ€‹t claiâ€‹res : architâ€‹ecture propreâ€‹â€‹, lisibilitÃ© du codeâ€‹â€‹, et maintenabilitÃ© Ã  long termeâ€‹. Ces axes sont essentiels pour mon objectif professionnelâ€‹, car ils me permettront Ã  terme dâ€‹'accoâ€‹mpâ€‹aâ€‹gner une Ã©quipe sur des projets solides, cohÃ©rents et Ã©volutifsâ€‹.
        </p>
      </section>

      {/* Nouvelle section pour les projets associÃ©s */}
      <section className={`${styles.section} ${styles.associatedProjectsSection}`}>
        <h2 className={styles.sectionTitle}>Projets AssociÃ©s</h2>
        <div className={styles.projectChipsContainer}>
          {associatedProjects.map((project) => (
            <Link key={project.name} href={project.path} passHref>
              <span className={`${styles.chip} ${styles.projectChip}`}>
                {project.name}
              </span>
            </Link>
          ))}
        </div>
      </section>

    </div>
  );
} 